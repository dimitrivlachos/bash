# Alias definitions
alias ls='ls --color=auto'
alias cdu='cd /dls/science/users/rto52325/'
alias ma='mamba activate '
alias md='mamba deactivate'

function mae() {
    local env_name="${1:-ENV}"  # Use the first argument if provided, otherwise default to 'ENV'
    local env_path=""

    if [ -d "./$env_name" ]; then
        echo "Activating environment '$env_name' in the current directory."
        env_path="$(pwd)/$env_name"
    elif [ -d "../$env_name" ]; then
        echo "Activating environment '$env_name' in the parent directory."
        env_path="$(cd .. && pwd)/$env_name"
    else
        echo "No environment named '$env_name' found in the current or parent directory."
        return 1
    fi

    # Activate the environment
    mamba activate "$env_path"
}

# Load modules
module load cuda/12.3
module load cmake

# Start the SSH agent and add keys
if [ -z "$SSH_AUTH_SOCK" ] ; then
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/id_github_ssh
fi


# Set conda packages directory
export CONDA_PKGS_DIRS="/dls/science/users/rto52325/.conda/pkgs"

# Define colors
VEN_COLOR="\[\033[0;32m\]"   # Green for virtual environment
DIR_COLOR="\[\033[1;34m\]"   # Blue for directory
USER_COLOR="\[\033[1;33m\]"  # Yellow for username
HOST_COLOR="\[\033[1;33m\]"  # Yellow for hostname
RESET_COLOR="\[\033[0m\]"    # Reset color to default

# Default toggle values
export SHOW_GIT_BRANCH=0
export SHOW_VENV=1
export SHOW_EMOJIS=0
export DIR_LENGTH="short"

# Check if terminal supports emojis
function check_emoji_support() {
    if [[ "$TERM_PROGRAM" == "vscode" ]]; then
        export SHOW_EMOJIS=1
    fi
}

# Parse git branch
function parse_git_branch() {
    if [ "$SHOW_GIT_BRANCH" -eq 1 ]; then
        local branch_name
        branch_name="$(git symbolic-ref --short HEAD 2>/dev/null)"
        if [ -n "$branch_name" ]; then
            if [ "$SHOW_EMOJIS" -eq 1 ]; then
                echo " üåø($branch_name)"
            else
                echo " ($branch_name)"
            fi
        fi
    fi
}

# Parse virtual environment
function parse_virtualenv() {
    # Update the local env_name each time this function is called
    local env_name="$(basename "$CONDA_DEFAULT_ENV")"
    
    if [ "$SHOW_VENV" -eq 1 ] && [ -n "$CONDA_DEFAULT_ENV" ]; then
        if [ "$SHOW_EMOJIS" -eq 1 ]; then
            echo -e "(${VEN_COLOR}${env_name}${RESET_COLOR} üêç)"
        else
            echo -e "(${VEN_COLOR}${env_name}${RESET_COLOR})"
        fi
    fi
}

# Map hostname to a more readable name
declare -A HOSTNAME_MAP
HOSTNAME_MAP["cs05r-sc-serv-53.diamond.ac.uk"]="i03-gpu"
HOSTNAME_MAP["cs04r-sc-serv-133.diamond.ac.uk"]="i24-gpu"

# Function to map hostname
function map_hostname() {
    local given_hostname="$1"
    local mapped_name="${HOSTNAME_MAP[$given_hostname]}"
    if [ -n "$mapped_name" ]; then
        echo "$mapped_name"
    else
        echo "\h"
    fi
}

# Set PS1
function set_prompt() {
    local venv branch dir
    venv="$(parse_virtualenv)"
    branch="$(parse_git_branch)"
    if [ "$DIR_LENGTH" == "short" ]; then
        dir="\W"
    else
        dir="\w"
    fi
    PS1="${venv}[${USER_COLOR}\u${RESET_COLOR}@${HOST_COLOR}$(map_hostname $(hostname))${RESET_COLOR}:${DIR_COLOR}${dir}${RESET_COLOR}${branch}]\$ "
}

# Toggle git branch display
function tgit() {
    if [ "$SHOW_GIT_BRANCH" -eq 0 ]; then
        export SHOW_GIT_BRANCH=1
        echo "Git branch display enabled."
    else
        export SHOW_GIT_BRANCH=0
        echo "Git branch display disabled."
    fi
    set_prompt
}

# Toggle virtual environment display
function tvenv() {
    if [ "$SHOW_VENV" -eq 0 ]; then
        export SHOW_VENV=1
        echo "Virtual environment display enabled."
    else
        export SHOW_VENV=0
        echo "Virtual environment display disabled."
    fi
    set_prompt
}

# Toggle directory length
function tdir() {
    if [ "$DIR_LENGTH" == "short" ]; then
        export DIR_LENGTH="long"
        echo "Directory display set to long."
    else
        export DIR_LENGTH="short"
        echo "Directory display set to short."
    fi
    set_prompt
}

# Toggle emoji display
function tem() {
    if [ "$SHOW_EMOJIS" -eq 0 ]; then
        export SHOW_EMOJIS=1
        echo "Emoji display enabled."
    else
        export SHOW_EMOJIS=0
        echo "Emoji display disabled."
    fi
    set_prompt
}

# Prompt function help
function ph() {
    echo "Prompt customization commands:"
    echo "  tgit      - Toggle the display of the current git branch in the prompt."
    echo "  tvenv     - Toggle the display of the current virtual environment in the prompt."
    echo "  tdir      - Toggle the display of the directory between short (\W) and long (\w) formats."
    echo "  tem       - Toggle the display of emojis in the prompt."
    echo "  ph        - Show this help message."
    echo "  rp        - Reset the prompt."
}

# Git function help
function gh() {
    echo "Git commands:"
    echo "  gst       - Show the status of the git repository."
    echo "  gco       - Checkout a branch."
    echo "  gcm       - Commit changes with a message."
    echo "  gpl       - Pull changes from the remote repository."
    echo "  gps       - Push changes to the remote repository."
}

# Aliases to toggle elements and show help
alias tgit='tgit'
alias tvenv='tvenv'
alias tdir='tdir'
alias tem='tem'
alias ph='ph'
alias rp='set_prompt'

# Bash completion for custom aliases
function _custom_prompt_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts="tgit tvenv tdir tem ph"

    if [[ ${cur} == * ]]; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}

complete -F _custom_prompt_completion tgit
complete -F _custom_prompt_completion tvenv
complete -F _custom_prompt_completion tdir
complete -F _custom_prompt_completion tem
complete -F _custom_prompt_completion ph

# Check if terminal supports emojis
check_emoji_support

# Set prompt initially
set_prompt

# Common git commands
alias gst='git status'
alias gco='git checkout'
alias gcm='git commit -m'
alias gpl='git pull'
alias gps='git push'

# Enable Git completion for the gco alias
__git_complete gco _git_checkout

# Update PS1 upon every prompt display
PROMPT_COMMAND=set_prompt
